{"version":3,"file":"static/iframe.2bb151056c0ecda82ce7.bundle.js","sources":["webpack:///./src/HexUtils.js"],"sourcesContent":["import Hex from \"./models/Hex\";\nimport Point from \"./models/Point\";\n\nclass HexUtils {\n  static DIRECTIONS = [\n    new Hex(1, 0),\n    new Hex(1, -1),\n    new Hex(0, -1),\n    new Hex(-1, 0),\n    new Hex(-1, 1),\n    new Hex(0, 1)\n  ];\n\n  static equals(a, b) {\n    return a.q === b.q && a.r === b.r && a.s === b.s;\n  }\n\n  static add(a, b) {\n    return new Hex(a.q + b.q, a.r + b.r, a.s + b.s);\n  }\n\n  static subtract(a, b) {\n    return new Hex(a.q - b.q, a.r - b.r, a.s - b.s);\n  }\n\n  static multiply(a, k) {\n    return new Hex(a.q * k, a.r * k, a.s * k);\n  }\n\n  static lengths(hex) {\n    return parseInt((Math.abs(hex.q) + Math.abs(hex.r) + Math.abs(hex.s)) / 2);\n  }\n\n  static distance(a, b) {\n    return HexUtils.lengths(HexUtils.subtract(a, b));\n  }\n\n  static direction(direction) {\n    return HexUtils.DIRECTIONS[(6 + (direction % 6)) % 6];\n  }\n\n  static neighbour(hex, direction) {\n    return HexUtils.add(hex, HexUtils.direction(direction));\n  }\n\n  static neighbours(hex) {\n    const array = [];\n    for (let i = 0; i < HexUtils.DIRECTIONS.length; i += 1) {\n      array.push(HexUtils.neighbour(hex, i));\n    }\n\n    return array;\n  }\n\n  static round(hex) {\n    let rq = Math.round(hex.q);\n    let rr = Math.round(hex.r);\n    let rs = Math.round(hex.s);\n\n    const qDiff = Math.abs(rq - hex.q);\n    const rDiff = Math.abs(rr - hex.r);\n    const sDiff = Math.abs(rs - hex.s);\n\n    if (qDiff > rDiff && qDiff > sDiff) rq = -rr - rs;\n    else if (rDiff > sDiff) rr = -rq - rs;\n    else rs = -rq - rr;\n\n    return new Hex(rq, rr, rs);\n  }\n\n  static hexToPixel(hex, layout) {\n    const s = layout.spacing;\n    const M = layout.orientation;\n    let x = (M.f0 * hex.q + M.f1 * hex.r) * layout.size.x;\n    let y = (M.f2 * hex.q + M.f3 * hex.r) * layout.size.y;\n    // Apply spacing\n    x = x * s;\n    y = y * s;\n    return new Point(x + layout.origin.x, y + layout.origin.y);\n  }\n\n  static pixelToHex(point, layout) {\n    const M = layout.orientation;\n    const pt = new Point(\n      (point.x - layout.origin.x) / layout.size.x,\n      (point.y - layout.origin.y) / layout.size.y\n    );\n    const q = M.b0 * pt.x + M.b1 * pt.y;\n    const r = M.b2 * pt.x + M.b3 * pt.y;\n    const hex = new Hex(q, r, -q - r);\n    return HexUtils.round(hex);\n  }\n\n  static lerp(a, b, t) {\n    return a + (b - a) * t;\n  }\n\n  static hexLerp(a, b, t) {\n    return new Hex(\n      HexUtils.lerp(a.q, b.q, t),\n      HexUtils.lerp(a.r, b.r, t),\n      HexUtils.lerp(a.s, b.s, t)\n    );\n  }\n\n  static getID(hex) {\n    if (hex instanceof Hex) {\n      return hex.toString();\n    }\n    return `${hex.q},${hex.r},${hex.s}`;\n  }\n}\n\nexport default HexUtils;\n"],"mappings":"AAGA","sourceRoot":""}